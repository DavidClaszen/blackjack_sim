
R version 4.2.2 (2022-10-31 ucrt) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Cleanup 
> rm(list = ls())
> 
> # Create deck
> deck <- rep(c(1:9, 10, 10, 10, 10), 4)
> shuffle_deck <- function(n_decks){
+   sample(rep(deck, n_decks))
+ }
> 
> # Function to reshuffle deck if too small or on command
> reshuffle <- function(required_cards = 1, shuffle_now = FALSE){
+   if (length(current_deck) < required_cards) {
+     assign(x = "current_deck", shuffle_deck(n_decks), envir = globalenv())
+   } else if (shuffle_now) {
+     assign(x = "current_deck", shuffle_deck(n_decks), envir = globalenv())  
+   }
+ }
> 
> # Define number of decks, shuffle into live deck
> n_decks <- 1
> current_deck <- shuffle_deck(n_decks)
> 
> 
> 
> 
> 
> 
> 
> 
> # Initiate empty hands
> dealer <- vector("list", 2)
> names(dealer) <- c("hand", "value")
> player <- vector("list", 3)
> names(player) <- c("hand", "bet", "value")
> 
> place_bet <- function(player, bet){
+   return(player$bet + bet)
+ }
> 
> 
> 
> 
> deal_cards <- function(n_cards = 2){
+   # Make sure deck is still large enough, otherwise shuffle
+   reshuffle(n_cards)
+   deck_copy <- current_deck
+   indices <- sample(1:length(deck_copy), n_cards)
+   # Remove drawn cards from deck; find better solution to globalenv?
+   assign(x = "current_deck", deck_copy[-indices], envir = globalenv())
+   return(deck_copy[indices])
+ }
> 
> 
> 
> 
> hand_value <- function(cards){
+   cur_value <- sum(cards)
+   # Add 10 points for an ace if equal or below 11 points
+   if (any(cards == 1) && cur_value <= 11) {
+     cur_value <- cur_value + 10
+   }
+   # Use 21.5 for blackjack
+   if (cur_value == 21 && length(cards) == 2) { cur_value <- 21.5}
+   return(cur_value)
+ }
> 
> dealer_logic <- function(dealer, S_17){
+   current_hand <- dealer$hand
+   # Keep checking while at or below 17
+   while (hand_value(current_hand) <= 17) {
+     # Make sure there's still cards in deck before drawing
+     reshuffle(1)
+     # If below 17, hit
+     if (hand_value(current_hand) < 17) {
+       current_hand <- c(current_hand, deal_cards(n_cards = 1))
+       # else, stand with 17 without an ace
+     } else if (hand_value(current_hand) == 17 && all(current_hand != 1)) {
+       return(current_hand)
+       # else stand if at 17 and using S17 rule
+     } else if (hand_value(current_hand) == 17 
+                && S_17
+                && any(current_hand == 1)) {
+       return(current_hand)
+       # else if at 17 and ace present and using H17 rule, hit, stay in loop
+     } else if (hand_value(current_hand) == 17 
+                && !S_17 
+                && any(current_hand == 1)) {
+       current_hand <- c(current_hand, deal_cards(n_cards = 1))
+     } 
+   }
+   dealer$hand <- current_hand
+   dealer$value <- hand_value(dealer$hand)
+   return(dealer)
+ }
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> dealer_plays <- function(S_17 = TRUE) {
+   dealer <<- structure(list(hand = deal_cards(2)))
+   # print(paste("Starting Hand: ", paste(dealer$hand, collapse = ", ")))
+   dealer$hand <<- dealer_logic(dealer, S_17 = S_17)
+   # print(paste("Resulting Hand: ", paste(dealer$hand, collapse = ", ")))
+   # print(paste("Value: ", hand_value(dealer$hand)))
+   return(hand_value(dealer$hand))
+ }
> 
> 
> player_logic <- function(player, hole_card, manual = FALSE){
+   if (manual) {
+     # current_value <- hand_value(player$hand)
+     print(c("Your hand currently consists of", player$hand))
+     action <- user_input(prompt="Enter Action: hit (h), stand (s), double (d), split (sp)")
+     #action <- readline(prompt="Enter Action: hit (h), stand (s), double (d), split (sp)")
+     return(player_plays(action))
+   }
+ }
> 
> 
> player_plays <- function(player, action){
+   if (action == "hit") {
+     player$hand <- c(player$hand, deal_cards(n_cards = 1))
+     return(player)
+   } else if (action == "stand") {
+     return(player)
+   } else if (action == "double") {
+     player$hand <- c(player$hand, deal_cards(n_cards = 1))
+     player$bet <- player$bet * 2
+     return(player)
+   } else if (action == "split") {
+     # CREATE THIS
+     return(player)
+   }
+ }
> 
> 
> 
> # outcomes <- replicate(100000, dealer_plays(S_17 = TRUE))
> # outcomes2 <- replicate(100000, dealer_plays(S_17 = FALSE))
> # outcomes <- replicate(10, dealer_plays(S_17 = TRUE))
> # hist(outcomes, breaks = 15:28)
> # hist(outcomes2, breaks = 15:28)
> # max(outcomes2)
> 
> 
> 
> play_game <- function(initial_bet, manual = FALSE, S_17 = TRUE){
+   # Initiate empty hands
+   dealer <- vector("list", 1)
+   names(dealer) <- c("hand")
+   player <- vector("list", 2)
+   names(player) <- c("hand", "bet")
+   
+   # Place initial bet
+   player$bet <- place_bet(player, initial_bet)
+   # Deal initial cards: player, dealer, player, dealer
+   # This shouldn't matter too much but just in case small decks make a difference
+   player$hand <- c(player$hand, deal_cards(n_cards = 1))
+   dealer$hand <- c(dealer$hand, deal_cards(n_cards = 1))
+   player$hand <- c(player$hand, deal_cards(n_cards = 1))
+   dealer$hand <- c(dealer$hand, deal_cards(n_cards = 1))
+   
+   # Player decides what to do based on hand, visible dealer card, or manual
+   player_logic(player, hole_card = dealer$hand[1], manual = manual)
+   # Dealer plays according to set logic, whether S17 or H17 rule
+   dealer <- dealer_logic(dealer, S_17 = S_17)
+   
+   return(hand_value(player$hand))
+ }
> 
> 
> user_input <- function(prompt) {
+   if (interactive()) {
+     return(readline(prompt))
+   } else {
+     cat(prompt)
+     return(readLines("stdin", n=1))
+   }
+ }
> 
> 
> 
> play_game(initial_bet = 1, manual = TRUE)
[1] "Your hand currently consists of" "10"                             
[3] "6"                              
Enter Action: hit (h), stand (s), double (d), split (sp)Error in player_plays(action) : 
  argument "action" is missing, with no default
Calls: play_game -> player_logic -> player_plays
Execution halted
